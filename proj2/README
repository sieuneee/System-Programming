<System Programming _ PROJECT 2 >

* 컴파일 하려면 make를 입력한다.
* make를 입력한 후 실행하려면 ./20181611.out을 입력한다.

* 프로그램이 실행되면 sicsim> 창에 수행하고자 하는 명령어를 입력한다.
* 명령어 뒷부분에 공백이 들어간 경우는 무시하고 실행한다.
* 입력받을 명령어의 길이는 MAX_LEN = 256 으로 설정하였다.
* Hash Table의 사이즈는 20이다.
* label의 최대 길이 LABEL LEN은 32로 설정하였다.


<명령어 종류>
************************PROJECT1***************************
1) h[elp]
- 실행 가능한 모든 명령어들의 리스트를 화면에 출력해준다.
- 출력된 명령어의 대괄호 안에 있는 부분은 생략 가능한 부분이다.

2)  d[ir]
- 현재 디렉터리에 있는 파일들을 출력한다.
- 파일 이름 옆에 ‘*’이 붙은 경우 실행 파일이고, ‘/‘이 붙은 경우 디렉터리를 의미한다.

3) q[uit]
- 프로그램을 종료한다.

4)  hi[story]
- 현재까지 사용한 명령어들을 순서대로 번호와 함께 출력한다.
- 가장 최근에 사용한 명령어가 하단에 오게 된다.
- 잘못된 입력인 경우에 추가되지 않는다.

5) du[mp] [start, end]
- 할당되어 있는 메모리의 내용을 출력해준다.
- 주소는 5자리이고, 16진수로 출력한다. (대문자 16진수)
- 출력 가능한 메모리 내용의 범위는 20~7E 까지이다. 그 이외의 값은 ‘.’으로 출력된다.
- start, end 값 없이 처음 dump 명령어를 실행하면 0번지부터 출력된다.
- dump의 실행으로 출력된 마지막 address는 내부에 저장하고 있다가 다시 dump를 실행시키면 저장된 마지막 address+1 번지부터 출력된다.
- 입력 예시
		du (o)
		dump (o)
		dump 4 (o)
		dump 4, 37 (o)
		dump 4,37 (x)  : start 값과 end 값 사이에는 반드시 공백이 있어야한다.
		dump g (x) : 잘못된 입력
		dump 37, 4 (x) : end 값은 반드시 start 값보다 크거나 같아야 한다.
- 잘못된 입력이 들어온 경우 에러메시지를 출력하고 넘어간다. (history에 저장되지 않는다.)

6) e[dit] address, value
- 메모리의 address 번지의 값을 value에 지정된 값으로 변경한다.
- 주소값이 메모리 범위를 벗어나는 경우, value 값이 범위를 벗어나는 경우 에러메시지를 출력한다.
- 입력 예시
		e 4, 6D (o)
		edit 4, 6D (o)
		edit 4,6D (x) : address 와 value 사이에는 반드시 공백이 있어야 한다.
		e (x) : address 값과 value 값이 있어야 한다.
		e 4, FF (x) : value 값이 범위를 벗어난다.
		e FFFFFF, 6D (x) : 주소값이 메모리 범위를 벗어난다.
- 잘못된 입력이 들어온 경우 에러메시지를 출력하고 넘어간다. (history에 저장되지 않는다.)

7) f[ill] start, end, value
- 메모리의 start 번지부터 end 번지까지의 값을 value에 지정된 값으로 변경한다.
- 주소값이 메모리 범위를 벗어나는 경우, value 값이 범위를 벗어나는 경우 에러메시지를 출력한다.
- 입력 예시
		f 24, 34, 2A (o)
		fill 24, 34, 2A (o)
		fill 24,34,2A (x) : start, end, value 사이에는 반드시 공백이 있어야 한다.
		fill 37, 4, 2A (x) : end 값은 반드시 start 값보다 크거나 같아야 한다.
		fill 24, 34, FF (x) : value 값이 범위를 벗어난다.
		fill 0, FFFFFF, 2A (x) : end 값이 메모리 범위를 벗어난다.
- 잘못된 입력이 들어온 경우 에러메시지를 출력하고 넘어간다. (history에 저장되지 않는다.)

8) reset
- 메모리 전체를 0으로 변경시킨다.

9) opcode mnemonic
- 명령어를 입력하면 해당하는 opcode를 출력한다.
- 해당 명령어가 존재하지 않으면 ERROR 메시지를 출력하고 넘어간다.

10) opcodelist
- opcode Hash Table 의 내용을 출력한다.

***********************PROJECT2***************************

11) type filename
- filename에 해당하는 파일을 디렉터리에서 읽어서 화면에 출력한다.
- 디렉터리에 존재하지 않으면 에러 메시지를 출력한다.
- 존재하는 파일을 입력해서 파일이 출력되면 history에 추가된다.

12) assemble filename
- filename에 해당하는 소스 파일을 읽어서 object 파일과 리스팅 파일을 만든다.
- 소스파일의 확장자는 .asm 이어야 한다.
- 리스팅파일은 .lst, 오브젝트파일은 .obj이다.
- 에러가 발생할 경우 오브젝트 파일과 리스팅 파일은 생성되지 않는다.
- 파일이 정상적으로 assemble 된 경우에만 history에 추가한다.

13) symbol
- assemble 과정 중에 생성된 symbol table을 화면에 출력한다.
- 가장 최근에 성공한 symbol table을 출력한다.
- symbol 알파벳 기준으로 내림차순으로 정렬된다.

